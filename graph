#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int n;
const int MAXN = 1001;
vector<int> g[MAXN]; 
bool used[MAXN];
vector<int> comp;
vector<int> ans;
void dfs(int v,vector<vector<int>> g) {
    used[v] = true;
    comp.push_back(v);
    for (size_t i = 0; i < g[v].size(); ++i) {
        int to = g[v][i];
        if (!used[to])
            dfs(to,g);
    }
}

void find_comps(vector<vector<int>> g) {
    for (int i = 0; i < n; ++i)
        used[i] = false;
    for (int i = 0; i < n; ++i)
        if (!used[i]) {
            comp.clear();
            dfs(i,g);
            ans.push_back(comp.size());
            cout << "Component:";
            for (size_t j = 0; j < comp.size(); ++j)
                cout << ' ' << comp[j];
            cout << endl;
        }
}
int main() {
    int m;
    cin >> n >> m;
    vector<vector<int>> g(n);
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(b - 1);
        g[b - 1].push_back(a - 1);
    }
    find_comps(g);
    sort(ans.begin(), ans.end());
    auto ind = unique(ans.begin(), ans.end());
    ans.erase(ind, ans.end());
    if (ans.size() > 2) cout << ans[ans.size() / 2] << endl;
    else cout << ans[0] << endl;
    system("pause");
    return 0;
}
